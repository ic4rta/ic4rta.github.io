I">0<p>Aprederas lo basico de como realizar un ataque format string y lekear valores de la memoria</p>

<h2 class="lead" id="que-es-format-string">¿Que es format string?</h2>

<p>Vulnerabilidad la cual ocurre cuando los inputs de los usuarios son ejecutados y procesados como comandos por una funcion vulnerable, esto permite que se puedan lekear valores de la memoria, ejecutar codigo, u ocasionar un segmentation fault</p>

<h3 id="funciones-vulnerables">Funciones vulnerables</h3>

<p>Las funciones que pueden ser vulnerables a format string son las de la familia <code class="language-plaintext highlighter-rouge">printf</code>, aca les dejo un listado de cuales son</p>

<ul>
  <li>printf()</li>
  <li>fprintf()</li>
  <li>sprintf()</li>
  <li>vprintf()</li>
  <li>snprintf()</li>
  <li>vsnprintf()</li>
  <li>vfprintf()</li>
  <li>vfprintf()</li>
</ul>

<p>El format string o cadena de formato en español es al argumento que se le pasa a una de las funciones que pueden ser vulnerables, aca una imagen de cuales son los format string y su tipo</p>

<p><img src="/assets/img/format-string/formatString.png" alt="" /></p>

<p>Imagen: <a href="https://www.tutorialspoint.com">https://www.tutorialspoint.com</a></p>

<h2 id="calling-conventions">Calling conventions</h2>

<p>Las calling conventions describen lo siguiente:</p>

<ul>
  <li>El orden en que se pasan los argumentos a una funcion</li>
</ul>

<p>Hay que tomar en cuenta que en una arquitectura de 64 bits los primeros 6 argumentos se pasan los los registros <code class="language-plaintext highlighter-rouge">RDI, RSI, RDX, RCX, R8, R9</code>, y los demas se empiezan a pasar por el stack y ese es el orden que describe las calling conventions</p>

<h2 id="lekenado-valores-de-la-memoria">Lekenado valores de la memoria</h2>

<p>Para explicar un poco mas a detalle esto vamos a ir probando con un pequeño programa en C el cual es el siguiente</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">char</span> <span class="n">input</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Holi:)"</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>El codigo lo pueden compilar como sea aun que yo lo hize de esta manera</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc ejemplo.c -o ejemplo
</code></pre></div></div>
<p>Para esta primera parte el programa simplemente esta usando la funcion <code class="language-plaintext highlighter-rouge">printf</code> para imprimir la variable <code class="language-plaintext highlighter-rouge">input</code> que contiene la cadena <code class="language-plaintext highlighter-rouge">Holi:)</code> y si ejecutamos el programa debe de salir algo como esto:</p>

<p><img src="/assets/img/format-string/pt1.png" alt="" /></p>

<p>Pero que pasara si ahora yo en el <code class="language-plaintext highlighter-rouge">printf</code> le indico mas format string y el codigo del programa queda asi</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
        <span class="kt">char</span> <span class="n">input</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Holi:)"</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s %x %x %x"</span> <span class="p">,</span><span class="n">input</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Lo compilamos de la misma forma y ejecutamos</p>

<p><img src="/assets/img/format-string/pt2.png" alt="" /></p>

<p><strong>¿De donde salieron esos caracteres?</strong></p>

<p>Bueno, en la funcion <code class="language-plaintext highlighter-rouge">printf</code> se le estan pasando 4 format string, el primer format string que es <code class="language-plaintext highlighter-rouge">%s</code> que es para imprimir en string, este corresponde a la variable <code class="language-plaintext highlighter-rouge">input</code>, pero los demas format string que son <code class="language-plaintext highlighter-rouge">%x</code> para imprimir un valor en su representacion en hexadecimal no corresponden a nada, entonces como no tienen nada que imprimir empiezan a buscar valores de la memoria del programa y eso es lo que imprime, entonces lo que hacen los 3 <code class="language-plaintext highlighter-rouge">%x</code> es buscar valores de la memoria e imprimirlos</p>

<h2 id="resolviendo-un-pequeño-ejercicio">Resolviendo un pequeño ejercicio</h2>

<p>El codigo es el siguiente y se compila de la misma forma que los anteriores</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">secret_num</span> <span class="o">=</span> <span class="mh">0x8badf00d</span><span class="p">;</span>

    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">64</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello "</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"! You'll never get my secret!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>En el programa se esta declarando una variable llamada <code class="language-plaintext highlighter-rouge">secret_num</code> con el valor <code class="language-plaintext highlighter-rouge">0x8badf00d</code> la cual nunca se muesta en la ejecucion del programa, tambien se esta declarando un buffer llamado <code class="language-plaintext highlighter-rouge">name</code> en el cual se va almacenar nuestro input y posteriormente lo imprime con <code class="language-plaintext highlighter-rouge">printf</code></p>

<p><strong>Objetivo:</strong> Lo que debemos de hacer para resolver este ejercicio es lekear la suficiente memoria para poder vizualizar el valor de <code class="language-plaintext highlighter-rouge">secret_num</code></p>

<p>Para la primera ejecucion del programa le pasaremos varios format string y queda asi:</p>

<p><img src="/assets/img/format-string/format1.png" alt="" /></p>

<p>Vemos como nos muesta varios valores de la memoria en su representacion en hexadecimal, sin embargo aun no vemos nuestro valor secreto pero ahi esta</p>

<p><strong>¿Como asi?</strong></p>

<p>Lo que pasa es que ahora debemos de empezar a jugar con los format string, si revisamos la tabla que puse al principio, hay un format string el cual es <code class="language-plaintext highlighter-rouge">%l</code>, este format string es para imprimir un tipo de dato <code class="language-plaintext highlighter-rouge">long</code>, entonces si ahora volvemos a ejecutar el binario pero le pasamos esto como input</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%lx %lx %lx %lx %lx %lx %lx %lx %lx
</code></pre></div></div>
<p>Nos mostrara algo como esto</p>

<p><img src="/assets/img/format-string/format2.png" alt="" /></p>

<p>Vemos como la posicion numero 7 que se imprimio tiene esto <code class="language-plaintext highlighter-rouge">8badf00d00000000</code>, el cual es nuestro numero secreto, tambien podemos mostrar directamente lo que se encuentre ahi y lo hacemos asi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%7$lx
</code></pre></div></div>
<p>Lo que esta haciendo es imprimir lo que encuentre en la posicion numero 7 y nos muestra esto que es el valor secreto que buscamos</p>

<p><img src="/assets/img/format-string/format3.png" alt="" /></p>

<h2 id="visualizandolo-en-radare2">Visualizandolo en radare2</h2>

<p>Ahora pasaremos a verlo por detras con radare2, dejo al URL de su pagina para que puedan descargarlo</p>

<p><a href="https://rada.re/n/radare2.html">https://rada.re/n/radare2.html</a></p>

<p>Ingresamos este comando para ejecutar el binario <code class="language-plaintext highlighter-rouge">radare2 ./vuln</code>, ingresamos <code class="language-plaintext highlighter-rouge">ood</code> para cambiarnos a modo de lectura y escritura, ingresamos <code class="language-plaintext highlighter-rouge">aaa</code> para que redare analice el binario, ingresamos <code class="language-plaintext highlighter-rouge">s main</code> para movernos a la funcion main y por ultimo usamos <code class="language-plaintext highlighter-rouge">pdf</code>para desensamblarla y nos muestra algo como esto</p>

<p><img src="/assets/img/format-string/radare1.png" alt="" /></p>

<p>Lo que hare es poner un break point en la direccion donde se hace el <code class="language-plaintext highlighter-rouge">printf</code> de nuestro input que es la linea que esta seleccionada, esto es para que cuando se ejecute el binario se detenga en esa parte, y el comando queda asi <code class="language-plaintext highlighter-rouge">db 0x5555555551fd</code>, ahora pondre <code class="language-plaintext highlighter-rouge">dc</code> para continuar la ejecucion del binario, vemos como se queda esperando un input, en este caso yo lo puse esto:</p>

<p><code class="language-plaintext highlighter-rouge">%lx %lx %lx %lx %lx %lx %lx %lx</code> y vemos como nos arroja un mensaje que dice <code class="language-plaintext highlighter-rouge">hit breakpoint at: 0x5555555551fd</code>, eso es por que llego a ese break point, ahora pondre <code class="language-plaintext highlighter-rouge">dr</code> para mostrar los registros y <code class="language-plaintext highlighter-rouge">dc</code>para continuar con la ejecucion del programa y vemos algo como esto</p>

<p><img src="/assets/img/format-string/radare2.png" alt="" /></p>

<p>Esto con el fin de que vean lo que menciono de las calling conventions, vemos como los primeros 6 argumentos se pasan por los registros, y lo que estamos haciendo con los primeros <code class="language-plaintext highlighter-rouge">%lx %lx %lx %lx %lx %lx %lx %lx</code> de nuestro input es mostrar los valores de esos registros empezando por el <code class="language-plaintext highlighter-rouge">RSI</code>, de hecho si vemos que lo que nos imprimio fue</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello 20 0 400 400 7ffff7fcbae0 80000000c 8badf00d00000000 20786c2520786c25
</code></pre></div></div>
<p>Donde los primeros 5 valores despues del <code class="language-plaintext highlighter-rouge">Hello</code>son los valores de los registros RSI, RDX, RCX, R8, R9 y los podemos comparar con los que nos salieron mostrando los registros con <code class="language-plaintext highlighter-rouge">dr</code>, simplemente en nuestro input los estamos representando en hexadecimal</p>

<p>Tambien para completar podemos mostrar el registro <code class="language-plaintext highlighter-rouge">RSP</code> con el comando <code class="language-plaintext highlighter-rouge">pxr @ rsp</code> y esto tambien nos debe de mostar nuestro input y el valor secreto que buscamos</p>

<p><img src="/assets/img/format-string/radare3.png" alt="" /></p>

<p>Eso ha sido todo, gracias por leer ❤</p>
:ET