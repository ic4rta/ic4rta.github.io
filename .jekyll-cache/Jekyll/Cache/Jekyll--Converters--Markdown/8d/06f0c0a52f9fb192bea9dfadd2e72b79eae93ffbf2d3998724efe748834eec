I"ˆ!<p class="lead">Te mostrare como puedes abusar de la generacion de numeros aleatorios generados por la funcion rand() con el fin de predecir un numero</p>

<h2 id="que-es-una-seed">¬øQue es una seed?</h2>

<p>Las ‚Äúseed‚Äù o semilla en espa√±ol, es un numerito inicial del generador de numeros pseudoaleatorios (PRNG), la cual es completamente determinista, es decir, que la generacion de numeros aleatorios esta determinada por la semilla y eso hace que el generador produzca la misma secuencia de numeros para un valor dado.</p>

<p>Esto va mas alla de hacer un simple programa en C que genere numeros random, las semillas se usan mucho en la ciberseguridad y mas que nada en la criptografia, es importante generar una buena semilla ya que si se obtiene el valor de la semilla se puede romper por completo el proceso de cifrado, parece una tonteria que con conocer un numerito se ocasiona un problema muy grave, si quieres ver ejemplos reales de una vulnerabilidad como esta puedes buscar</p>

<ul>
  <li>
    <p>CVE-2020-7010:
  La aplicaci√≥n en la nube en Kubernetes genera contrase√±as mediante un generador de n√∫meros aleatorios d√©bil en funci√≥n del tiempo de implementaci√≥n.</p>
  </li>
  <li>
    <p>CVE-2019-11495:
  El servidor usa erlang:now() para sembrar el PRNG, lo que da como resultado un peque√±o espacio de b√∫squeda para posibles semillas aleatorias</p>
  </li>
  <li>
    <p>CVE-2018-12520:
  El PRNG del producto no est√° sembrado para la generaci√≥n de ID de sesi√≥n</p>
  </li>
  <li>
    <p>CVE-2016-10180:
  La generaci√≥n de PIN del enrutador se basa en la siembra de rand (time(0)).</p>
  </li>
</ul>

<p>Referencia por <a href="https://cwe.mitre.org/data/definitions/335.html">MITRE</a></p>

<h2 id="que-es-prng">¬øQue es PRNG?</h2>

<p>La generacion de numeros pseudoaleatorios (PRNG) es una funcion que genera numeros aleatorios dado tres estados, pongamolos que PRNG actua como una caja negra, que toma un numero (semilla) y produce una secuencia de bits, segun, se dice que esta secuencia es random si pasa una serie de pruebas estadisticas, y entonces se dice que es random, las pruebas puede ser que se mide la frecuencia de bits y secuencia de bits.</p>

<p>Dije que esta dado tres estados, estos son:</p>

<ul>
  <li><strong>Estado de inicializacion</strong>: El cual toma la semilla y pone al generador en su estado inicial</li>
  <li><strong>Estado de transicion</strong>: Transforma el estado del generador tomando en cuenta la semilla</li>
  <li><strong>Estado de salida</strong>: Transforma el estado actual para producir un numero fijo de bits</li>
</ul>

<p>Para que quede mas claro veamos lo siguiente:</p>

<p>Se obtiene una secuencia de bits pseudoaleatoria el cual es puesta en el generador usando la semilla (primer estado), y poniendo al generador a llamar a la funcion de transicion repetidamente (segundo estado) y por ultimo se produce una salida de bits aleatorios (tercer estado)</p>

<p><img src="/assets/img/prng/prng.png" alt="" /></p>

<h2 id="explotando-un-prng-bad-seed">Explotando un PRNG bad seed</h2>

<p>Usare el ejemplo mas simple que pude encontrar, es de la pagina pwnable.kr y el problema se llama ‚Äúrandom‚Äù, te puedes contectar usando SSH <code class="language-plaintext highlighter-rouge">ssh random@pwnable.kr -p2222</code> pw:guest</p>

<p>Este es el codigo del archivo ejecutable:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">random</span><span class="p">;</span>
	<span class="n">random</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>	<span class="c1">// valor random</span>

	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">key</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">key</span> <span class="o">^</span> <span class="n">random</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0xdeadbeef</span> <span class="p">){</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Good!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">system</span><span class="p">(</span><span class="s">"/bin/cat flag"</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"Wrong, maybe you should try 2^32 cases.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Y como extra la pista que nos dejan es: <code class="language-plaintext highlighter-rouge">¬°Papi, ens√©√±ame a usar valores aleatorios en la programaci√≥n!</code></p>

<p>El programa es muy simple acepta la entrada de n√∫meros enteros y lo compara con 0xdeadbeef y, si el valor coincide, debe mostrar la flag</p>

<p>El programa usa la funci√≥n rand() para generar un valor aleatorio. La funci√≥n rand() devuelve un n√∫mero pseudoaleatorio, rand es inseguro para generar n√∫meros aleatorios. Los n√∫meros que genera son predecibles cuando la semilla no es dada para el rand. Entonces  si la semilla se establece en 1, el generador se reinicializa a su valor inicial y produce los mismos valores</p>

<h3 id="que-significa-key--random">¬øQue significa ‚Äúkey ^ random‚Äù?</h3>

<p>Esta es la pieza clave del programa, el s√≠mbolo ^ es el operador XOR en C. XOR es el equivalente a ‚Äúo‚Äù, que significa ‚Äúuno o el otro, pero no ambos‚Äù, con esto que tenemos hasta ahora se puede podemos generar una ecuacion que es <code class="language-plaintext highlighter-rouge">random ^ 0xdeadbeef = key</code>, esta ecuacion nos permite resolver <code class="language-plaintext highlighter-rouge">key</code></p>

<h3 id="entonces-que-debemos-de-hacer">¬øEntonces que debemos de hacer?</h3>

<p>Para poder resolverlo debemos de hacer de que <code class="language-plaintext highlighter-rouge">key ^ random</code> sea igual a <code class="language-plaintext highlighter-rouge">0xdeadbeef</code> y para eso debemos de encontrar la manera de predecir el valor generado de la funcion rand() y luego revertir la operacion haciendo XORing el valor de rand() con 0xdeadbeef. Que genial, ¬øNo? ^-^</p>

<h2 id="explotando-el-binario">Explotando el binario</h2>

<p>Como primer paso generaremos un numero aleatorio con rand en otro programa</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">rand</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Una vez ejecutandolo nos dara este numero <code class="language-plaintext highlighter-rouge">1804289383</code> y nuestra ecuacion queda asi <code class="language-plaintext highlighter-rouge">1804289383 ^ 0xdeadbeef = key</code></p>

<p>Como segundo paso vamos hacer XORing con <code class="language-plaintext highlighter-rouge">0xdeadbeef</code></p>

<p>Yo lo hare abriendo el interprete de python e ingresare <code class="language-plaintext highlighter-rouge">1804289383 ^ 0xdeadbeef</code>, esto nos dara algo como esto <code class="language-plaintext highlighter-rouge">3039230856</code>, y ese valor es el numero que le pasaremos al programa</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>random@pwnable:~<span class="nv">$ </span>./random 
3039230856
Good!
Mommy, I thought libc random is unpredictable...
</code></pre></div></div>
<p>Y listo, hemos resuelto el ejercicio y la flag es: <code class="language-plaintext highlighter-rouge">Mommy, I thought libc random is unpredictable... (Mami, pens√© que libc random era impredecible...)</code></p>

<p>Eso ha sido todo, gracias por leer ‚ù§</p>
:ET